.TH mfstools "1" "July 2015" "MooseFS 3.0.39-1" "This is part of MooseFS"
.SH NAME
mfstools \- perform MooseFS\-specific operations
.SH SYNOPSIS
.B mfsgetgoal
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fIOBJECT\fP...
.PP
.B mfssetgoal
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] [\fB-s\fP] [\fB-l\fP] \fIGOAL\fP[\fB+\fP|\fB-\fP]|\fILABELS\fP|\fB-K\fP \fIKEEP_LABELS\fP [\fB-C\fP \fICREATE_LABELS\fP] [\fB-A\fP \fIARCHIVE_LABELS\fP \fB-d\fP \fIARCHIVE_DELAY\fP] \fIOBJECT\fP...
.PP
.B mfscopygoal
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fISOURCE_OBJECT\fP \fIOBJECT\fP...
.PP
.B mfsgettrashtime
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fIOBJECT\fP...
.PP
.B mfssettrashtime
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fISECONDS\fP[\fB+\fP|\fB-\fP] \fIOBJECT\fP...
.PP
.B mfscopytrashtime
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fISOURCE_OBJECT\fP \fIOBJECT\fP...
.PP
.B mfsgeteattr
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fIOBJECT\fP...
.PP
.B mfsseteattr
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fB-f\fP \fIATTRNAME\fP [\fB-f\fP \fIATTRNAME\fP ...] \fIOBJECT\fP...
.PP
.B mfsdeleattr
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fB-f\fP \fIATTRNAME\fP [\fB-f\fP \fIATTRNAME\fP ...] \fIOBJECT\fP...
.PP
.B mfscopyeattr
[\fB-r\fP] [\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fISOURCE_OBJECT\fP \fIOBJECT\fP...
.PP
.B mfscheckfile
\fIFILE\fP...
.PP
.B mfsfileinfo
\fIFILE\fP...
.PP
.B mfsdirinfo
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] [\fB-i\fP|\fB-d\fP|\fB-f\fP|\fB-c\fP|\fB-l\fP|\fB-s\fP|\fB-r\fP] \fIOBJECT\fP...
.PP
.B mfsfilerepair
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fIFILE\fP...
.PP
.B mfsappendchunks
\fISNAPSHOT_FILE\fP \fIOBJECT\fP...
.PP
.B mfsmakesnapshot
[\fB-o\fP] \fISOURCE\fP... \fIDESTINATION\fP
.PP
.B mfsrmsnapshot
[\fB-f\fP] \fIOBJECT\fP...
.PP
.B mfsgetquota
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] 
\fIDIRECTORY\fP...
.PP
.B mfssetquota
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] [\fB-p\fP \fIgrace_period\fP] [\fB-i\fP|\fB-I\fP \fIinodes\fP] 
[\fB-l\fP|\fB-L\fP \fIlength\fP] [\fB-s\fP|\fB-S\fP \fIsize\fP] [\fB-r\fP|\fB-R\fP \fIrealsize\fP]
\fIDIRECTORY\fP...
.PP
.B mfsdelquota
[\fB-a\fP|\fB-A\fP|\fB-i\fP|\fB-I\fP|\fB-l\fP|\fB-L\fP|\fB-s\fP|\fB-S\fP|\fB-r\fP|\fB-R\fP]
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fB-f\fP \fIDIRECTORY\fP...
.PP
.B mfscopyquota
[\fB-n\fP|\fB-h\fP|\fB-H\fP|\fB-k\fP|\fB-m\fP|\fB-g\fP] \fISOURCE_DIRECTORY\fP \fIDESTINATION_DIRECTORY\fP
.PP
.B mfsfilepaths
\fIOBJECT\fP|\fIINODE\fP...
.SH DESCRIPTION
\fBmfsgetgoal\fP and \fBmfssetgoal\fP operate on object's \fIgoal\fP value
and since version 3.0 also object's \fIlabels\fP, i.e. the number of copies
in which all file data are stored and optionally where those copies should be stored.
It means that file should survive failure of one less chunkservers than its \fIgoal\fP
value. \fIGoal\fP must be set between 1 and 9 (note that 1 is strongly
unadvised).
\fBmfsgetgoal\fP prints current \fIgoal\fP value and \fIlabels\fP of given object(s).
\fB-r\fP option enables recursive mode, which works as usual for every
given file, but for every given directory additionally prints current
\fIgoal\fP/\fIlabels\fP of all contained objects (files and directories).
\fBmfssetgoal\fP changes current \fIgoal\fP value of given object(s). If new
value is specified in \fIGOAL\fP\fB+\fP form, \fIgoal\fP value is increased to
\fIGOAL\fP for objects with lower \fIgoal\fP value and unchanged for the rest.
Similarly, if new value is specified as \fIGOAL\fP\fB\-\fP, \fIgoal\fP value is
decreased to \fIGOAL\fP for objects with higher \fIgoal\fP value and unchanged
for the rest. Since version 3.0 of MooseFS goal can be also defined as a group of
expressions with labels. Label expressions are described below.
\fB-r\fP option enables recursive mode. Option \fB-s\fP enables strict mode for chunk creation
and \fB-l\fP enables loose mode for chunk creation. Creation modes are described below.
These tools can be used on any file, directory or deleted (\fItrash\fP) file.
.PP
\fBmfsgettrashtime\fP and \fBmfssettrashtime\fP operate on object's
\fItrashtime\fP value, i.e. the number of seconds the file is preserved in
special \fItrash\fP directory before it's finally removed from filesystem.
\fITrashtime\fP must be non\-negative integer value.
\fBmfsgettrashtime\fP prints current \fItrashtime\fP value of given object(s).
\fB-r\fP option enables recursive mode, which works as usual for every given
file, but for every given directory additionally prints current \fItrashtime\fP
value of all contained objects (files and directories).
\fBmfssettrashtime\fP changes current \fItrashtime\fP value of given object(s).
If new value is specified in \fISECONDS\fP\fB+\fP form, \fItrashtime\fP value is
increased to \fISECONDS\fP for objects with lower \fItrashtime\fP value and unchanged
for the rest. Similarly, if new value is specified as \fISECONDS\fP\fB\-\fP,
\fItrashtime\fP value is decreased to \fISECONDS\fP for objects with higher
\fItrashtime\fP value and unchanged for the rest. \fB-r\fP option enables
recursive mode.
These tools can be used on any file, directory or deleted (\fItrash\fP) file.
.PP
\fBmfsgeteattr\fP, \fBmfsseteattr\fP and \fBmfsdeleattr\fP
tools are used to get, set or delete some extra attributes. Attributes are
described below.
.PP
\fBmfscheckfile\fP checks and prints number of chunks and number of chunk
copies belonging to specified file(s).
It can be used on any file, included deleted (\fItrash\fP).
.PP
\fBmfsfileinfo\fP prints location (\fIchunkserver\fP host and port) of each
chunk copy belonging to specified file(s).
It can be used on any file, included deleted (\fItrash\fP).
.PP
\fBmfsdirinfo\fP is extended, MooseFS-specific equivalent of \fBdu -s\fP
command. It prints summary for each specified object (single file or
directory tree). If you only want to see one parameter, then add one of
show options (see \fBSHOW OPTIONS\fP).
.PP
\fBmfsfilerepair\fP deals with broken files (those which cause I/O errors on
read operations) to make them partially readable. In case of missing chunk
it fills missing parts of file with zeros; in case of chunk version mismatch
it sets chunk version known to \fBmfsmaster\fP to highest one found on
chunkservers. Note: because in the second case content mismatch can occur in
chunks with the same version, it's advised to make a copy (not a snapshot!)
and delete original file after "repairing".
.PP
\fBmfsappendchunks\fP (equivalent of \fBmfssnapshot\fP from MooseFS 1.5)
appends a lazy copy of specified file(s) to specified snapshot file ("lazy"
means that creation of new chunks is delayed to the moment one copy is
modified).
If multiple files are given, they are merged into one target file in the way
that each file begins at \fIchunk\fP (64MB) boundary; padding space is left
empty.
.PP
\fBmfsmakesnapshot\fP makes a "real" snapshot (lazy copy, like in case of
\fBmfsappendchunks\fP) of some object(s) or subtree (similarly to \fBcp -r\fP
command). It's atomic with respect to each \fISOURCE\fP argument separately.
If \fIDESTINATION\fP points to already existing file, error will be reported
unless \fB-o\fP (overwrite) option is given. Note: if \fISOURCE\fP is
a directory, it's copied as a whole; but if it's followed by trailing slash,
only directory content is copied.
.PP
\fBmfsrmsnapshot\fP removes objects created as a result of
\fBmfsmakesnapshot\fP (similarly to \fBrm -r\fP, but much faster). For safety
reasons objects created via \fBmfsmakesnapshot\fP have the \fBsnapshot\fP
attribute set (see \fBEXTRA ATTRIBUTES\fP) and only such objects can be removed
using \fBmfsrmsnapshot\fP command. By default all files and directories inside
specified directory must have this attribute set for the command to remove the
whole directory; otherwise the command will not remove anything. This behavior
can be overriden by \fB-f\fP option. With this option \fBmfsrmsnapshot\fP will
remove only those files/directories that have \fBsnapshot\fP attribute set and
will leave everything else untouched.
.PP
\fBmfsgetquota\fP, \fBmfssetquota\fP and \fBmfsdelquota\fP
tools are used to check, define and delete quotas. Quota is set on a directory. It can be set in one 
of 4 ways: for number of inodes inside the directory (total sum of the
subtree's inodes) with \fB-i\fP, \fB-I\fP options, for sum of (logical) file lengths with
\fB-l\fP, \fB-L\fP options,
for sum of chunk sizes (not considering goals) with \fB-s\fP, \fB-S\fP options and for physical
hdd space (more or less chunk sizes multiplied by goal of each chunk) with \fB-r\fP, \fB-R\fP options.
Small letters set soft quota, capital letters set hard quota. \fB-a\fP and \fB-A\fP options in
\fBmfsdelquota\fP mean all kinds of quota. Quota behaviour is described below.
For soft quota grace period can be defined using \fB-p\fP option. When grace period is not given then
default value will be used (option defined in mfsmaster.cfg or seven days if it's not defined there).
.PP
\fBmfsfilepaths\fP tool can be used to find all occurences (hard links) of given file in filesystem.
Also can be used to find file by number of i-node. In case of searching by i-node tool has to be run
in mfs mounted directory.
.PP
\fBmfscopygoal\fP, \fBmfscopytrashtime\fP, \fBmfscopyeattr\fP and \fBmfscopyquota\fP tools can be used
to copy particular settings from one object to another.

.SH GENERAL OPTIONS
Most of \fBmfstools\fP use \fB-n\fP, \fB-h\fP, \fB-H\fP, \fB-k\fP, \fB-m\fP and \fB-g\fP
options to select
format of printed numbers. \fB-n\fP causes to print exact numbers, \fB-h\fP
uses binary prefixes (Ki, Mi, Gi as 2^10, 2^20 etc.) while \fB-H\fP uses SI
prefixes (k, M, G as 10^3, 10^6 etc.). \fB-k\fP, \fB-m\fP and \fB-g\fP show plain numbers
respectivaly in kibis (binary kilo - 1024), mebis (binary mega - 1024^2)
and gibis (binary giga - 1024^3).
The same can be achieved by setting
\fBMFSHRFORMAT\fP environment variable to: \fB0\fP (exact numbers), \fB1\fP
or \fBh\fP (binary prefixes), \fB2\fP or \fBH\fP (SI prefixes), \fB3\fP or
\fBh+\fP (exact numbers and binary prefixes), \fB4\fP or \fBH+\fP (exact
numbers and SI prefixes). The default is to print just exact numbers.
.SH SHOW OPTIONS
.TP
\fB-i\fP
show number of inodes
.TP
\fB-d\fP
show number of directories
.TP
\fB-f\fP
show number of files
.TP
\fB-c\fP
show number of chunks
.TP
\fB-l\fP
show length
.TP
\fB-s\fP
show size
.TP
\fB-r\fP
show realsize
.SH LABELS
Since version 3.0 of MooseFS goals for files can be defined as expressions with labels.
Labels are letters (A-Z - 26 letters) that can be assigned to chunkservers. Each chunk server can
have multiple (up to 26) labels. \fBmfssetgoal\fP accepts expressions with labels along with simple numeric goals.
To set goal with label user has to specify goal expression:
.PP
\fBmfssetgoal\fP LABELS \fIFILE\fP - a file will be stored according to the LABELS expression. LABELS
expression consist of set of subexpressions separated by commas, each subexpression specifies the storage schema
of one copy of the file. Subexpression can be: an asterisk or a label schema. Label schema can be one label or an expression with 
sums, multiplications and brackets. Sum means a file can be stored on any chunkserver matching any element of the
sum (logical or). Multiplication means a file can be stored only on a chunkserver matching all elements (logical and).
Asterisk means any chunkserver. Identical subexpressions can be shortened by adding a number in front of one instead
of repeating it a number of times.
.PP
\fBmfssetgoal\fP -K KEEP_LABELS [ -C CREATE_LABELS ] [ -A ARCHIVE_LABELS -d ARCHIVE_DELAY ] \fIFILE\fP - a file will be created
(and written) using CREATE_LABELS then almost immediately system will use KEEP_LABELS and if ARCHIVE_LABELS and ARCHIVE_DELAY are specified
then ARCHIVE_LABELS will be used after ARCHIVE_DELAY days after last file modifictaion time.
.PP
Examples:
.PP
\fBmfssetgoal\fP A,B \fIFILE\fP - a file will have two copies, one copy will be stored on chunkserver(s) 
with label A, the other on chunkserver(s) with label B
.PP
\fBmfssetgoal\fP A,* \fIFILE\fP - a file will have two copies, one copy will be stored on chunkserver(s) 
with label A, the other on any chunkserver(s)
.PP
\fBmfssetgoal\fP *,* \fIFILE\fP - a file will have two copies, stored on any chunkservers (different for each copy) 
.PP
\fBmfssetgoal\fP AB,C+D \fIFILE\fP - a file will have two copies, one copy will be stored on any chunkserver(s) that has both
labels A and B (multiplication of labels), the other on any chunkserver(s) that has either the C label or the D label
(sum of labels)
.PP
\fBmfssetgoal\fP A,B[X+Y],C[X+Y] \fIFILE\fP - a file will have three copies, one copy will be stored on any chunkserver(s) 
with A label, the second on any chunserver(s) that has the B label and either X or Y label, the third on any chunkserver(s), that
has the C label and either X or Y label
.PP
\fBmfssetgoal\fP A,A \fIFILE\fP is equivalent to \fBmfssetgoal\fP 2A \fIFILE\fP
.PP
\fBmfssetgoal\fP A,BC,BC,BC \fIFILE\fP is equivalent to \fBmfssetgoal\fP A,3BC \fIFILE\fP
.PP
\fBmfssetgoal\fP *,* \fIFILE\fP is equivalent to \fBmfssetgoal\fP 2* \fIFILE\fP is equivalent to \fBmfssetgoal\fP 2 \fIFILE\fP
.SH CREATION MODES
When labels are specified then it is important to specify what to do in case when there is no space available on all servers
marked with labels needed for new chunk creation. Also all servers marked with such labels can be temporariliy overloaded.
The question is if the system should create chunks on other servers or not.
.PP
Answer to this question should be resolved by user and hence the options \fB-s\fP and \fB-l\fP. By default (no options)
in case of overloaded servers system will wait for them, but in case of no space available will use other servers.
.PP
Option \fB-s\fP turns on STRICT mode. In this mode the system will return error (ENOSPC) in case of no space
available on servers marked with labels specified for chunk creation.
.PP
Option \fB-l\fP turns on LOOSE mode. In this mode the system will use other servers in case of overloaded servers and
replicate data to correct servers later.
.SH EXTRA ATTRIBUTES
\fBnoowner\fP This flag means,
that particular object belongs to current user (\fIuid\fP and \fIgid\fP are equal
to \fIuid\fP and \fIgid\fP values of accessing process). Only root (\fIuid\fP=0)
sees the real \fIuid\fP and \fIgid\fP.
.PP
\fBnoattrcache\fP This flag means, that standard file attributes such as uid, gid,
mode, length and so on won't be stored in kernel cache. In MooseFS 1.5 this was the
only behaviour, and mfsmount always prevented attributes from being stored in
kernel cache, but in MooseFS 1.6 attributes can be cached, so in very rare ocassions
it could be useful to turn it off.
.PP
\fBnoentrycache\fP This flag is similar to above. It prevents directory entries
from being cached in kernel.
.PP
\fBnodatacache\fP This flag means, that data cache should be cleared every time a file is opened.
.PP
\fBsnapshot\fP This flag means that the object was created via a \fBmfsmakesnapshot\fP command
.SH QUOTAS
Quota is always set on a directory. Hard quota cannot be exceeded anytime.
Soft quota can be exceeded for a period of time (7 days). Once a quota is exceeded in a
directory, user must go below the quota during the next 7 days. If not, the soft 
quota for this particular directory starts to behave like a hard quota. The 7 days period
is global and cannot currently be modified.
.SH INHERITANCE
When new object is created in MooseFS, attributes such as goal, trashtime and extra
attributes are inherited from parent directory. So if you set i.e. "noowner"
attribute and goal to 3 in a directory then every new object created in
this directory will have goal set to 3 and "noowner" flag set. A newly created
object inherits always the current set of its parent's attributes. Changing a
directory attribute does not affect its already created children. To change
an attribute for a directory and all of its children use "-r" option.
.SH "REPORTING BUGS"
Report bugs to <bugs@moosefs.com>.
.SH COPYRIGHT
Copyright (C) 2015 Jakub Kruszona-Zawadzki, Core Technology Sp. z o.o.

This file is part of MooseFS.

MooseFS is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 2 (only).

MooseFS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MooseFS; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
or visit http://www.gnu.org/licenses/gpl-2.0.html
.SH "SEE ALSO"
.BR mfsmount (8)
